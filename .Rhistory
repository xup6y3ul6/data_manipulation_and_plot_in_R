public = list(
## Property
times = NA,
p1type = NULL,
p2type = NULL,
type = c("Hedge", "Inversive", "Herd"),
game = NULL,
P1 = NULL,
P2 = NULL,
win = NULL,     #加總贏的dataframe
winlst = NULL,  #每一次的win統計
thing = c("Price", "Dprice", "P1Cash", "P2Cash", "P1Stock", "P2Stock", "P1Value", "P2Value", "P1Asset", "P2Asset", "P1Decision", "P2Decision"),
market = Market$new(total=100),
simulation_data = list(),
## Method
initialize = function(P1type, P2type){
# stopifnot(is.numeric(Times), length(Times) == 1)
stopifnot(is.character(P1type), length(P1type) == 1)
stopifnot(is.character(P2type), length(P2type) == 1)
# self$times = Times
self$p1type = P1type
self$p2type = P2type
},
playing = function(x){
# print(x)
self$P1 <- Player$new(10000,10,self$p1type,100)
self$P2 <- Player$new(10000,10,self$p2type,100)
self$market <- Market$new(total=100)
for (i in 1:self$market$total) {
self$P1$decide(self$market)
self$P2$decide(self$market)
if(i <= 20){
self$market$condition("Balance")
} else if (i <= 60){
self$market$condition("Bubble")
} else {
self$market$condition("Burst")
}
self$market$game(self$P1$decision[i],self$P2$decision[i])
self$P1$ending(self$market)
self$P2$ending(self$market)
}
data <- list(simulate_times = x,
price = self$market$price, deltaPrice = self$market$dprice,
p1_cash = self$P1$cash, p2_cash = self$P2$cash,
p1_stock = self$P1$stock, p2_stock = self$P2$stock,
p1_value = self$P1$value, p2_value = self$P2$value,
p1_asset = self$P1$asset, p2_asset = self$P2$asset,
p1_decision = self$P1$decision, p2_decision = self$P2$decision)
return(data)
},
simulate = function(sim_times){
stopifnot(is.numeric(sim_times), length(sim_times) == 1)
self$simulation_data <- sapply(1:sim_times, self$playing, simplify = FALSE, USE.NAMES = TRUE)
}
# csv1 = function(){
#   for (i in 1:3) {
#     for (j in 1:i) {
#       self$p1type = self$type[i]
#       self$p2type = self$type[j]
#       self$game <- as.data.frame(self$playing(1))
#       colnames(self$game) <- self$thing
#       write_csv(self$game, paste0(self$p1type,"_",self$p2type,".csv"))
#     }
#   }
# },
# csvwin = function(){
#   a = 0   #第幾個
#   self$win <- data.frame()
#   for (i in 1:3) {
#     for (j in 1:i) {
#       a = a + 1
#       self$winlst <- c()
#       self$p1type = self$type[i]
#       self$p1type = self$type[j]
#       for (k in 1:self$times) {
#         self$game <- self$playing(1)
#         if(self$game[[3]][100] > self$game[[4]][100]){
#           self$winlst <- append(self$winlst, 1)
#         } else if(self$game[[3]][100] < self$game[[4]][100]){
#           self$winlst <- append(self$winlst, 2)
#         } else{
#           self$winlst <- append(self$winlst, 0)
#         }
#       }
#       self$win[1,a] <- sum(self$winlst==1)
#       self$win[2,a] <- sum(self$winlst==2)
#     }
#   }
#   colnames(self$win) <- c("Hedge_Hedge", "Inversive_Hedge", "Inversive_Inversive", "Herd_Hedge", "Herd_Inversive", "Herd_Herd")
#   write_csv(self$win, "win.csv")
# },
# plotting = function(){
#   self$game <- lapply(1:self$times, self$playing)
#   for (i in 1:self$times) {
#     self$game <- as.data.frame(self$playing(1))
#     colnames(self$game) <- self$thing
#     self$win
#     self$pic <- sapply(self$game, "[[", i) %>%
#       data.frame() %>%
#       add_column(trial = 1:101) %>%
#       pivot_longer(-trial, names_to = "sim_times", values_to = "value") %>%
#       ggplot(aes(x = trial, y = value, group = sim_times)) +
#       geom_line(color = "skyblue") +
#       labs(x = paste(self$p1type,self$p2type,sep="_")) +
#       labs(y = self$thing[i]) +
#       theme_classic()
#   }
#   self$pic
#   # grid.arrange(self$pic[1:1])
# }
)
)
game <- Game$new("Herd","Hedge")
game$simulate(2)
game$simulation_data
data <- lapply(game$simulation_data, function(x){
x <- do.call(cbind, x) %>%
as_tibble()%>%
select(ends_with("stock"))
})
data2 <- sapply(data, "[", c("p1_cash", "p2_cash"))
data
x <- do.call(cbind, x) %>%
as_tibble()%>%
select(simulate_times = x,ends_with("stock"))
x <- do.call(cbind, x) %>%
as_tibble()%>%
select(simulate_times = x, ends_with("stock"))
game$simulation_data
tibble(game$simulation_data[[1]])
as.tibble(game$simulation_data[[1]])
data <- lapply(game$simulation_data, function(x){
x <- as_tibble(x) %>%
select(simulate_times, ends_with("stock"))
})
data2 <- sapply(data, "[", c("p1_cash", "p2_cash"))
data
data2 <- data %>%
do.call(rbind)
data2 <-  do.call(rbind,data)
data2
data <- list(simulate_times = x, trials = 1:101,
price = self$market$price, deltaPrice = self$market$dprice,
p1_cash = self$P1$cash, p2_cash = self$P2$cash,
p1_stock = self$P1$stock, p2_stock = self$P2$stock,
p1_value = self$P1$value, p2_value = self$P2$value,
p1_asset = self$P1$asset, p2_asset = self$P2$asset,
p1_decision = self$P1$decision, p2_decision = self$P2$decision)
return(data)
Game <- R6Class("Game",
public = list(
## Property
times = NA,
p1type = NULL,
p2type = NULL,
type = c("Hedge", "Inversive", "Herd"),
game = NULL,
P1 = NULL,
P2 = NULL,
win = NULL,     #加總贏的dataframe
winlst = NULL,  #每一次的win統計
thing = c("Price", "Dprice", "P1Cash", "P2Cash", "P1Stock", "P2Stock", "P1Value", "P2Value", "P1Asset", "P2Asset", "P1Decision", "P2Decision"),
market = Market$new(total=100),
simulation_data = list(),
## Method
initialize = function(P1type, P2type){
# stopifnot(is.numeric(Times), length(Times) == 1)
stopifnot(is.character(P1type), length(P1type) == 1)
stopifnot(is.character(P2type), length(P2type) == 1)
# self$times = Times
self$p1type = P1type
self$p2type = P2type
},
playing = function(x){
# print(x)
self$P1 <- Player$new(10000,10,self$p1type,100)
self$P2 <- Player$new(10000,10,self$p2type,100)
self$market <- Market$new(total=100)
for (i in 1:self$market$total) {
self$P1$decide(self$market)
self$P2$decide(self$market)
if(i <= 20){
self$market$condition("Balance")
} else if (i <= 60){
self$market$condition("Bubble")
} else {
self$market$condition("Burst")
}
self$market$game(self$P1$decision[i],self$P2$decision[i])
self$P1$ending(self$market)
self$P2$ending(self$market)
}
data <- list(simulate_times = x, trials = 1:101,
price = self$market$price, deltaPrice = self$market$dprice,
p1_cash = self$P1$cash, p2_cash = self$P2$cash,
p1_stock = self$P1$stock, p2_stock = self$P2$stock,
p1_value = self$P1$value, p2_value = self$P2$value,
p1_asset = self$P1$asset, p2_asset = self$P2$asset,
p1_decision = self$P1$decision, p2_decision = self$P2$decision)
return(data)
},
simulate = function(sim_times){
stopifnot(is.numeric(sim_times), length(sim_times) == 1)
self$simulation_data <- sapply(1:sim_times, self$playing, simplify = FALSE, USE.NAMES = TRUE)
}
# csv1 = function(){
#   for (i in 1:3) {
#     for (j in 1:i) {
#       self$p1type = self$type[i]
#       self$p2type = self$type[j]
#       self$game <- as.data.frame(self$playing(1))
#       colnames(self$game) <- self$thing
#       write_csv(self$game, paste0(self$p1type,"_",self$p2type,".csv"))
#     }
#   }
# },
# csvwin = function(){
#   a = 0   #第幾個
#   self$win <- data.frame()
#   for (i in 1:3) {
#     for (j in 1:i) {
#       a = a + 1
#       self$winlst <- c()
#       self$p1type = self$type[i]
#       self$p1type = self$type[j]
#       for (k in 1:self$times) {
#         self$game <- self$playing(1)
#         if(self$game[[3]][100] > self$game[[4]][100]){
#           self$winlst <- append(self$winlst, 1)
#         } else if(self$game[[3]][100] < self$game[[4]][100]){
#           self$winlst <- append(self$winlst, 2)
#         } else{
#           self$winlst <- append(self$winlst, 0)
#         }
#       }
#       self$win[1,a] <- sum(self$winlst==1)
#       self$win[2,a] <- sum(self$winlst==2)
#     }
#   }
#   colnames(self$win) <- c("Hedge_Hedge", "Inversive_Hedge", "Inversive_Inversive", "Herd_Hedge", "Herd_Inversive", "Herd_Herd")
#   write_csv(self$win, "win.csv")
# },
# plotting = function(){
#   self$game <- lapply(1:self$times, self$playing)
#   for (i in 1:self$times) {
#     self$game <- as.data.frame(self$playing(1))
#     colnames(self$game) <- self$thing
#     self$win
#     self$pic <- sapply(self$game, "[[", i) %>%
#       data.frame() %>%
#       add_column(trial = 1:101) %>%
#       pivot_longer(-trial, names_to = "sim_times", values_to = "value") %>%
#       ggplot(aes(x = trial, y = value, group = sim_times)) +
#       geom_line(color = "skyblue") +
#       labs(x = paste(self$p1type,self$p2type,sep="_")) +
#       labs(y = self$thing[i]) +
#       theme_classic()
#   }
#   self$pic
#   # grid.arrange(self$pic[1:1])
# }
)
)
game <- Game$new("Herd","Hedge")
game$simulate(2)
data <- lapply(game$simulation_data, function(x){
x <- as_tibble(x) %>%
select(simulate_times, ends_with("stock"))
})
data2 <- do.call(rbind,data) %>%
pivot_longer(cols = contains("_"), names_to = "player", values_to = "value") %>%
ggplot(aes(x = ))
data <- list(times = x, trials = 1:101,
price = self$market$price, deltaPrice = self$market$dprice,
p1_cash = self$P1$cash, p2_cash = self$P2$cash,
p1_stock = self$P1$stock, p2_stock = self$P2$stock,
p1_value = self$P1$value, p2_value = self$P2$value,
p1_asset = self$P1$asset, p2_asset = self$P2$asset,
p1_decision = self$P1$decision, p2_decision = self$P2$decision)
Game <- R6Class("Game",
public = list(
## Property
times = NA,
p1type = NULL,
p2type = NULL,
type = c("Hedge", "Inversive", "Herd"),
game = NULL,
P1 = NULL,
P2 = NULL,
win = NULL,     #加總贏的dataframe
winlst = NULL,  #每一次的win統計
thing = c("Price", "Dprice", "P1Cash", "P2Cash", "P1Stock", "P2Stock", "P1Value", "P2Value", "P1Asset", "P2Asset", "P1Decision", "P2Decision"),
market = Market$new(total=100),
simulation_data = list(),
## Method
initialize = function(P1type, P2type){
# stopifnot(is.numeric(Times), length(Times) == 1)
stopifnot(is.character(P1type), length(P1type) == 1)
stopifnot(is.character(P2type), length(P2type) == 1)
# self$times = Times
self$p1type = P1type
self$p2type = P2type
},
playing = function(x){
# print(x)
self$P1 <- Player$new(10000,10,self$p1type,100)
self$P2 <- Player$new(10000,10,self$p2type,100)
self$market <- Market$new(total=100)
for (i in 1:self$market$total) {
self$P1$decide(self$market)
self$P2$decide(self$market)
if(i <= 20){
self$market$condition("Balance")
} else if (i <= 60){
self$market$condition("Bubble")
} else {
self$market$condition("Burst")
}
self$market$game(self$P1$decision[i],self$P2$decision[i])
self$P1$ending(self$market)
self$P2$ending(self$market)
}
data <- list(times = x, trials = 1:101,
price = self$market$price, deltaPrice = self$market$dprice,
p1_cash = self$P1$cash, p2_cash = self$P2$cash,
p1_stock = self$P1$stock, p2_stock = self$P2$stock,
p1_value = self$P1$value, p2_value = self$P2$value,
p1_asset = self$P1$asset, p2_asset = self$P2$asset,
p1_decision = self$P1$decision, p2_decision = self$P2$decision)
return(data)
},
simulate = function(sim_times){
stopifnot(is.numeric(sim_times), length(sim_times) == 1)
self$simulation_data <- sapply(1:sim_times, self$playing, simplify = FALSE, USE.NAMES = TRUE)
}
# csv1 = function(){
#   for (i in 1:3) {
#     for (j in 1:i) {
#       self$p1type = self$type[i]
#       self$p2type = self$type[j]
#       self$game <- as.data.frame(self$playing(1))
#       colnames(self$game) <- self$thing
#       write_csv(self$game, paste0(self$p1type,"_",self$p2type,".csv"))
#     }
#   }
# },
# csvwin = function(){
#   a = 0   #第幾個
#   self$win <- data.frame()
#   for (i in 1:3) {
#     for (j in 1:i) {
#       a = a + 1
#       self$winlst <- c()
#       self$p1type = self$type[i]
#       self$p1type = self$type[j]
#       for (k in 1:self$times) {
#         self$game <- self$playing(1)
#         if(self$game[[3]][100] > self$game[[4]][100]){
#           self$winlst <- append(self$winlst, 1)
#         } else if(self$game[[3]][100] < self$game[[4]][100]){
#           self$winlst <- append(self$winlst, 2)
#         } else{
#           self$winlst <- append(self$winlst, 0)
#         }
#       }
#       self$win[1,a] <- sum(self$winlst==1)
#       self$win[2,a] <- sum(self$winlst==2)
#     }
#   }
#   colnames(self$win) <- c("Hedge_Hedge", "Inversive_Hedge", "Inversive_Inversive", "Herd_Hedge", "Herd_Inversive", "Herd_Herd")
#   write_csv(self$win, "win.csv")
# },
# plotting = function(){
#   self$game <- lapply(1:self$times, self$playing)
#   for (i in 1:self$times) {
#     self$game <- as.data.frame(self$playing(1))
#     colnames(self$game) <- self$thing
#     self$win
#     self$pic <- sapply(self$game, "[[", i) %>%
#       data.frame() %>%
#       add_column(trial = 1:101) %>%
#       pivot_longer(-trial, names_to = "sim_times", values_to = "value") %>%
#       ggplot(aes(x = trial, y = value, group = sim_times)) +
#       geom_line(color = "skyblue") +
#       labs(x = paste(self$p1type,self$p2type,sep="_")) +
#       labs(y = self$thing[i]) +
#       theme_classic()
#   }
#   self$pic
#   # grid.arrange(self$pic[1:1])
# }
)
)
game <- Game$new("Herd","Hedge")
game$simulate(2)
x <- as_tibble(x) %>%
select(times, trials, ends_with("stock"))
data <- lapply(game$simulation_data, function(x){
x <- as_tibble(x) %>%
select(times, trials, ends_with("stock"))
})
data
g <- do.call(rbind,data) %>%
pivot_longer(cols = contains("_"), names_to = "player", values_to = "value") %>%
ggplot(aes(x = trials, y = value, color = player)) +
geom_line() +
theme_bw()
g
g <- do.call(rbind,data) %>%
pivot_longer(cols = contains("_"), names_to = "player", values_to = "value") %>%
ggplot(aes(x = trials, y = value, group = times, color = player)) +
geom_line() +
theme_bw()
ggplotly(g)
g <- do.call(rbind,data) %>%
pivot_longer(cols = contains("_"), names_to = "player", values_to = "value") %>%
ggplot(aes(x = trials, y = value, group = times, color = player)) +
geom_line() +
theme_bw()
g
ggplotly(g)
g <- do.call(rbind,data) %>%
pivot_longer(cols = contains("_"), names_to = "player", values_to = "value") %>%
ggplot(aes(x = trials, y = value, group = times, color = player)) +
geom_line(alpha = 0.5) +
theme_bw()
g
ggplotly(g)
ggplotly(g)
ggplotly(g)
g
game <- Game$new("Herd","Hedge")
game$simulate(50)
data <- lapply(game$simulation_data, function(x){
x <- as_tibble(x) %>%
select(times, trials, ends_with("stock"))
})
g <- do.call(rbind,data) %>%
pivot_longer(cols = contains("_"), names_to = "player", values_to = "value") %>%
ggplot(aes(x = trials, y = value, group = times, color = player)) +
geom_line(alpha = 0.5) +
theme_bw()
g
game$simulate(10)
game <- Game$new("Herd","Hedge")
game$simulate(10)
data <- lapply(game$simulation_data, function(x){
x <- as_tibble(x) %>%
select(times, trials, ends_with("stock"))
})
g <- do.call(rbind,data) %>%
pivot_longer(cols = contains("_"), names_to = "player", values_to = "value") %>%
ggplot(aes(x = trials, y = value, group = times, color = player)) +
geom_line(alpha = 0.5) +
theme_bw()
g
g <- do.call(rbind,data) %>%
pivot_longer(cols = contains("_"), names_to = "player", values_to = "value") %>%
ggplot(aes(x = trials, y = value, group = times)) +
geom_line(alpha = 0.5) +
facet_wrap(~player) +
theme_bw()
g
g <- do.call(rbind,data) %>%
pivot_longer(cols = contains("_"), names_to = "player", values_to = "value") %>%
ggplot(aes(x = trials, y = value, group = times)) +
geom_line(alpha = 0.5) +
facet_grid(~player) +
theme_bw()
g
game$simulate(2)
data <- lapply(game$simulation_data, function(x){
x <- as_tibble(x) %>%
select(times, trials, ends_with("stock"))
})
g <- do.call(rbind,data) %>%
pivot_longer(cols = contains("_"), names_to = "player", values_to = "value") %>%
ggplot(aes(x = trials, y = value, group = times)) +
geom_line(alpha = 0.5) +
facet_grid(~player) +
theme_bw()
g
g <- do.call(rbind,data) %>%
pivot_longer(cols = contains("_"), names_to = "player", values_to = "value") %>%
ggplot(aes(x = trials, y = value, group = times, color = player)) +
geom_line(alpha = 0.5) +
facet_grid(~player) +
theme_bw()
g
g <- do.call(rbind,data) %>%
pivot_longer(cols = contains("_"), names_to = "player", values_to = "value") %>%
ggplot(aes(x = trials, y = value, group = times, color = player)) +
geom_line(alpha = I(0.75)) +
facet_grid(~player) +
theme_bw()
g
ggplotly(g)
x = c(1, 1, 1, 1, 1, 1, 1, 1, 1,
2, 2, 2, 2, 2, 2,
3, 3, 3,
4,
5)
x
moments::skewness(x)
median(x)
mean(x)
hist(x)
barplot(x)
hist(x)
qchisq(0.95, 1)
setwd("C:/Users/Nick Lin/Desktop/tmp/data_manipulation_and_plot_in_R")
